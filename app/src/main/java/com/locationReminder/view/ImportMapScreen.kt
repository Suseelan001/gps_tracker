package com.locationReminder.viewimport android.Manifestimport android.content.pm.PackageManagerimport androidx.activity.compose.BackHandlerimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.runtime.Composableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.material3.Iconimport androidx.compose.material3.Textimport androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.unit.dpimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Sliderimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.core.app.ActivityCompatimport androidx.navigation.NavHostControllerimport com.google.android.gms.location.LocationServicesimport com.google.android.gms.maps.CameraUpdateFactoryimport com.google.android.gms.maps.model.CameraPositionimport com.google.android.gms.maps.model.LatLngimport com.google.maps.android.compose.Circleimport com.google.maps.android.compose.GoogleMapimport com.google.maps.android.compose.MapPropertiesimport com.google.maps.android.compose.MapUiSettingsimport com.google.maps.android.compose.Markerimport com.google.maps.android.compose.MarkerStateimport com.google.maps.android.compose.rememberCameraPositionStateimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextimport androidx.compose.material3.SliderDefaultsimport androidx.compose.ui.unit.spimport com.locationReminder.viewModel.AddLocationViewModelimport androidx.compose.runtime.DisposableEffectimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.layout.wrapContentHeightimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.verticalScrollimport androidx.compose.material3.BottomSheetScaffoldimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.Switchimport androidx.compose.material3.SwitchDefaultsimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.draw.scaleimport androidx.compose.ui.res.painterResourceimport com.locationReminder.ui.theme.Hex1C1C1Cimport com.locationReminder.Rimport com.locationReminder.ui.theme.Hexeef267import com.locationReminder.viewModel.PlacesClientManagerimport kotlinx.coroutines.delay@Composable fun ImportMapScreen(    navHostController: NavHostController,    itemId: String,type: String,    addLocationViewModel: AddLocationViewModel) {    SetStatusBarStyle()    var showMap by remember { mutableStateOf(false) }    LaunchedEffect(Unit) {        delay(200)        showMap = true    }    if (showMap) {        ImportMapHomeScreen(navHostController, itemId,type,            addLocationViewModel        )    } }@OptIn(ExperimentalMaterial3Api::class)@Composablefun ImportMapHomeScreen(    navHostController: NavHostController,    itemId: String,type: String,    addLocationViewModel: AddLocationViewModel){    val getAccountList by addLocationViewModel.getAllRecord().observeAsState(emptyList())    val markerList = getAccountList.filter { it.entryType.equals("ImportedMarker", ignoreCase = true) }    val context = LocalContext.current    var currentLocation by remember { mutableStateOf<Pair<Double, Double>?>(null) }    var isLoading by remember { mutableStateOf(true) }    var markerPosition by remember { mutableStateOf<LatLng?>(null) }    var circleRadius by remember { mutableFloatStateOf(100f) }    var maximumRadius by remember { mutableStateOf("2000") }    var address by remember { mutableStateOf("") }    var title by remember { mutableStateOf("") }    var vibrationOn by remember { mutableStateOf(true) }    var showDistance by remember { mutableStateOf("") }    val coroutineScope = rememberCoroutineScope()    DisposableEffect(Unit) {        onDispose {            PlacesClientManager.shutdown()        }    }    LaunchedEffect(Unit) {        if (itemId.isNotEmpty()) {            val locationRecord = addLocationViewModel.getSingleRecord(itemId.toInt())            title=locationRecord.title            circleRadius = locationRecord.radius            markerPosition = LatLng(locationRecord.lat, locationRecord.lng)            coroutineScope.launch(Dispatchers.IO) {                val addr = getAddressFromLatLng(context, LatLng(locationRecord.lat, locationRecord.lng))                withContext(Dispatchers.Main) {                    address = addr                }            }        }    }    BackHandler(enabled = true) {        navHostController.popBackStack()    }    val requestPermissionLauncher = rememberLauncherForActivityResult(        ActivityResultContracts.RequestPermission()    ) { isGranted ->        if (isGranted) {            getCurrentLocation(context) { location ->                currentLocation = location                isLoading = false            }        } else {            isLoading = false        }    }    val cameraPositionState = rememberCameraPositionState {        position = CameraPosition.fromLatLngZoom(LatLng(0.0, 0.0), 10f)    }    LaunchedEffect(Unit) {        when {            ActivityCompat.checkSelfPermission(                context, Manifest.permission.ACCESS_FINE_LOCATION            ) == PackageManager.PERMISSION_GRANTED -> {                getCurrentLocation(context) { location ->                    currentLocation = location                    isLoading = false                }            }            else -> requestPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)        }    }    LaunchedEffect(currentLocation) {        if (itemId.isEmpty()){            currentLocation?.let {                cameraPositionState.position = CameraPosition.fromLatLngZoom(                    LatLng(it.first, it.second), 15f                )            }        }    }    BottomSheetScaffold(        sheetContainerColor=Hex1C1C1C,        sheetPeekHeight = if (address!= "") 180.dp else 0.dp,        sheetContent = {            if (address!= "") {                Column(                    modifier = Modifier                        .fillMaxWidth()                        .wrapContentHeight()                        .verticalScroll(rememberScrollState())                ) {                    GoogleMap(                        modifier = Modifier.fillMaxSize(),                        cameraPositionState = cameraPositionState,                        properties = MapProperties(isMyLocationEnabled = true),                        uiSettings = MapUiSettings(                            zoomControlsEnabled = false,                            myLocationButtonEnabled = false                        ),                        onMapClick = { latLng ->                            // your existing onMapClick logic                        }                    ) {                        // Existing marker                        markerPosition?.let {                            Marker(                                state = MarkerState(position = it)                            )                            Circle(                                center = it,                                radius = circleRadius.toDouble(),                                strokeColor = Color.Blue,                                strokeWidth = 2f,                                fillColor = Color(0x330000FF)                            )                        }                        markerList.forEach { record ->                            val position = LatLng(record.lat, record.lng)                            Marker(                                state = MarkerState(position = position),                                title = record.title,                                snippet = record.address                            )                            Circle(                                center = position,                                radius = record.radius.toDouble(),                                strokeColor = Color.Blue,                                strokeWidth = 2f,                                fillColor = Color(0x330000FF)                            )                        }                    }                    Column(                        modifier = Modifier                            .fillMaxWidth()                            .background(Color(0xFF1C1C1C))                            .padding(start = 20.dp, end = 20.dp, bottom = 20.dp)                    ) {                        Text("Radius", color = Color.White, fontSize = 16.sp)                        Row(                            modifier = Modifier                                .fillMaxWidth()                                .padding(vertical = 12.dp),                            verticalAlignment = Alignment.CenterVertically                        ) {                            Slider(                                value = circleRadius,                                onValueChange = { circleRadius = it },                                valueRange = 1f..maximumRadius.toFloat(),                                colors = SliderDefaults.colors(                                    thumbColor = Hexeef267,                                    activeTrackColor = Hexeef267                                ),                                modifier = Modifier.weight(1f)                            )                            Spacer(modifier = Modifier.width(12.dp))                            val selectedUnit = DistanceUnit.fromString(showDistance)                            val distanceText = formatDistance(circleRadius, selectedUnit)                            Text(                                text = distanceText,                                color = Hexeef267,                                fontSize = 14.sp                            )                        }                        Spacer(Modifier.height(12.dp))                        Text("Title", color = Color.White, fontSize = 16.sp)                        TextField(                            value = title,                            onValueChange = { title = it },                            placeholder = { Text("Title Here", color = Color.Gray) },                            colors = TextFieldDefaults.colors(                                focusedTextColor = Color.White,                                unfocusedTextColor = Color.White,                                focusedIndicatorColor = Color.Gray,                                unfocusedIndicatorColor = Color.DarkGray,                                cursorColor = Color.Gray,                                unfocusedContainerColor = Color.Transparent,                                focusedContainerColor = Color.Transparent,                            ),                            singleLine = true,                            modifier = Modifier.fillMaxWidth()                        )                        Spacer(Modifier.height(16.dp))                        Text("Address", color = Color.White, fontSize = 16.sp)                        Spacer(Modifier.height(12.dp))                        Text(address, color = Color.Gray, fontSize = 16.sp)                        Spacer(Modifier.height(12.dp))                        Row(                            verticalAlignment = Alignment.CenterVertically,                            horizontalArrangement = Arrangement.SpaceBetween,                            modifier = Modifier                                .fillMaxWidth()                                .padding(vertical = 8.dp)                        ) {                            Text("Vibration", color = Color.White, fontSize = 16.sp)                            Switch(                                checked = vibrationOn,                                onCheckedChange = { newState -> vibrationOn = newState },                                modifier = Modifier.scale(0.75f),                                colors = SwitchDefaults.colors(                                    uncheckedThumbColor = Color(0xFFEEF267),                                    checkedThumbColor = Color.White,                                    uncheckedTrackColor = Color.White,                                    checkedTrackColor = Color(0xFFEEF267),                                    uncheckedBorderColor = Color.Transparent,                                    checkedBorderColor = Color.Transparent                                )                            )                        }                        Spacer(Modifier.height(40.dp))                    }                }            } }    ) {        Box(modifier = Modifier.fillMaxSize()) {            Column(modifier = Modifier.fillMaxSize()) {                Box(modifier = Modifier.fillMaxSize()) {                        Box(Modifier.fillMaxSize()) {                            if (itemId.isNotEmpty()){                                LaunchedEffect(markerPosition) {                                    markerPosition?.let {                                        cameraPositionState.animate(                                            update = CameraUpdateFactory.newLatLngZoom(it, 15f)                                        )                                    }                                }                            }                            Column(                                modifier = Modifier                                    .align(Alignment.BottomEnd)                                    .padding(end = 16.dp, bottom = 180.dp),                                verticalArrangement = Arrangement.spacedBy(5.dp)                            ) {                                FloatingActionButton(                                    onClick = {                                        coroutineScope.launch {                                            val fusedLocationClient =                                                LocationServices.getFusedLocationProviderClient(                                                    context                                                )                                            val location = fusedLocationClient.lastLocation.await()                                            location?.let {                                                val currentLatLng =                                                    LatLng(it.latitude, it.longitude)                                                cameraPositionState.animate(                                                    CameraUpdateFactory.newLatLngZoom(                                                        currentLatLng,                                                        15f                                                    )                                                )                                            }                                        }                                    },                                    containerColor = Color.White,                                    contentColor = Color.Black,                                ) {                                    Icon(                                        painter = painterResource(id = R.drawable.focus_current_location),                                        contentDescription = "Go to current location"                                    )                                }                                FloatingActionButton(                                    onClick = {                                        val currentZoom = cameraPositionState.position.zoom                                        coroutineScope.launch {                                            cameraPositionState.animate(                                                CameraUpdateFactory.zoomTo(currentZoom + 1f)                                            )                                        }                                    },                                    containerColor = Color.White,                                    contentColor = Color.Black,                                ) {                                    Icon(                                        painter = painterResource(id = R.drawable.plus),                                        contentDescription = "Zoom In"                                    )                                }                                FloatingActionButton(                                    onClick = {                                        val currentZoom = cameraPositionState.position.zoom                                        coroutineScope.launch {                                            cameraPositionState.animate(                                                CameraUpdateFactory.zoomTo(currentZoom - 1f)                                            )                                        }                                    },                                    containerColor = Color.White,                                    contentColor = Color.Black,                                ) {                                    Icon(                                        painter = painterResource(id = R.drawable.minus),                                        contentDescription = "Zoom Out",                                        tint = Color.Black,                                        modifier = Modifier.padding(3.dp)                                    )                                }                            }                        }                    }            }        }    }}